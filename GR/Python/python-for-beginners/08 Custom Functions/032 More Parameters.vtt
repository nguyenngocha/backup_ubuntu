WEBVTT

1
00:00:00.012 --> 00:00:04.551
[MUSIC]

2
00:00:04.551 --> 00:00:09.132
In this video, I'll be explaining the
prompters within functions.

3
00:00:09.132 --> 00:00:11.872
So as you can see here, I've just got a
simple

4
00:00:11.872 --> 00:00:15.790
list set up here, with four values from
one to four.

5
00:00:15.790 --> 00:00:17.960
And then I've defined function, just
called function

6
00:00:17.960 --> 00:00:19.690
name with no prompters in it at the
moment.

7
00:00:19.690 --> 00:00:22.830
We'll be adding the list to that in a
second, and

8
00:00:22.830 --> 00:00:25.420
as you can see we just have a lot of tag
line.

9
00:00:25.420 --> 00:00:29.290
Which is optional, you don' t need it but
I'm keeping it there because it allows

10
00:00:29.290 --> 00:00:32.300
us to remember what it is that a

11
00:00:32.300 --> 00:00:36.510
function does, and then we are just
returning nothing.

12
00:00:36.510 --> 00:00:42.860
So, this is just a demonstration of
something called a by reference parameter.

13
00:00:42.860 --> 00:00:45.120
Which is, and every single argument within

14
00:00:45.120 --> 00:00:47.600
the python language is passed by a
reference.

15
00:00:47.600 --> 00:00:50.550
Which means that if you change what a
prompter refers to

16
00:00:50.550 --> 00:00:54.750
within a function then the changes also
reflected in the calling function.

17
00:00:54.750 --> 00:01:01.620
So if we just add the list now to this,
I'll just do list lump.

18
00:01:01.620 --> 00:01:04.250
And that's added it as a prompter now, so
we're pressing that in.

19
00:01:05.370 --> 00:01:09.790
And, actually I'll just call this lists.

20
00:01:09.790 --> 00:01:12.900
To chain, it differentiates from the
previous one.

21
00:01:14.210 --> 00:01:18.170
And if I do lists.append, which is a
function which is

22
00:01:18.170 --> 00:01:23.640
allowed for lists and not for other types
of arrays within Python.

23
00:01:25.150 --> 00:01:28.810
And if we not just append, I'll just
append 5, 6, 7, 8.

24
00:01:28.810 --> 00:01:34.717
So as you can see, if I was to return, if

25
00:01:34.717 --> 00:01:40.628
I was to print out the values here.

26
00:01:40.628 --> 00:01:46.524
[BLANK_AUDIO]

27
00:01:46.524 --> 00:01:47.635
If I was to print my list now

28
00:01:47.635 --> 00:01:51.987
[BLANK_AUDIO]

29
00:01:51.987 --> 00:01:52.643
Mm, sorry.

30
00:01:52.643 --> 00:02:02.643
[BLANK_AUDIO]

31
00:03:02.507 --> 00:03:05.223
So as we can see, if I was to print this
now.

32
00:03:05.223 --> 00:03:11.182
And obviously this is the value and adding
list one, which

33
00:03:11.182 --> 00:03:16.980
is what we defined right at the very
beginning.

34
00:03:16.980 --> 00:03:19.730
You'll see that we get, this is the value
and we get one, two, three, four.

35
00:03:19.730 --> 00:03:28.563
[BLANK_AUDIO]

36
00:03:28.563 --> 00:03:34.206
Now if we were to run this and print it,
now i'll just type in this the value.

37
00:03:34.206 --> 00:03:39.020
And if I add on to the end of the list
one.

38
00:03:39.020 --> 00:03:42.660
What you can see is if you run it we get
one two three four.

39
00:03:42.660 --> 00:03:44.310
Which is what you'd expect.

40
00:03:44.310 --> 00:03:46.930
However now, all I'm going to do is just
call function name

41
00:03:49.780 --> 00:03:51.470
with list one in it.

42
00:03:55.740 --> 00:04:00.380
And then I'm going to run this exact same
call again.

43
00:04:01.630 --> 00:04:04.445
And you'll see that the actual data has
changed.

44
00:04:04.445 --> 00:04:10.386
[NOISE].

45
00:04:10.386 --> 00:04:13.001
And as you can see, the values of that 1,
2,

46
00:04:13.001 --> 00:04:16.176
3, 4, and then we've got again, 5, 6, 7,
8.

47
00:04:16.176 --> 00:04:19.044
So, as you can tell, and also, I'll
demonstrate this

48
00:04:19.044 --> 00:04:22.130
inside of here by doing a print in here as
well.

49
00:04:22.130 --> 00:04:24.240
And, I'll just change this to a list.

50
00:04:24.240 --> 00:04:27.590
So, you'll see that this is, the exact
same, being called

51
00:04:27.590 --> 00:04:31.360
within the function and without outside of
the function as well.

52
00:04:31.360 --> 00:04:35.488
So the difference between callings of the
inside and the outside

53
00:04:35.488 --> 00:04:39.204
of a function is pretty much negligible in
terms of printing.

54
00:04:39.204 --> 00:04:43.169
Because any values that changes within the
function, have actually changed

55
00:04:43.169 --> 00:04:46.832
outside of the function and this is
because it's passed by reference.

56
00:04:46.832 --> 00:04:50.877
Now in some languages, you can pass by
value, which means that you create

57
00:04:50.877 --> 00:04:55.440
a copy of the parameter and then you have
the that data that it sends.

58
00:04:55.440 --> 00:04:59.630
And so, you create a copy of a variable
and you send over that copy.

59
00:04:59.630 --> 00:05:03.450
So any changes are made to that copy and
does not affect the original.

60
00:05:03.450 --> 00:05:07.080
However, when something's passed by
reference, it passes a reference

61
00:05:07.080 --> 00:05:10.290
address to a place in the main memory, or
the RAM.

62
00:05:10.290 --> 00:05:14.740
Which can then be changed and altered and
because its changed in the

63
00:05:14.740 --> 00:05:18.120
main, or the original, it changes it
throughout the rest of the code.

64
00:05:19.310 --> 00:05:22.800
So that is how you would pass something by
reference and

65
00:05:22.800 --> 00:05:26.920
that is the only way that you can pass
parameter within Python.

66
00:05:26.920 --> 00:05:28.250
You cannot pass it by value.

67
00:05:28.250 --> 00:05:30.664
So you have to be more, eh, more careful

68
00:05:30.664 --> 00:05:35.001
and diligent, when you are actually,
creating functions within Python.

69
00:05:35.001 --> 00:05:39.442
Cuz any mistakes could mess up the rest of
the code without, within your project.

70
00:05:39.442 --> 00:05:40.910
So thank you for watching.

71
00:05:40.910 --> 00:05:42.710
I'm Alex [UNKNOWN] from LuchBreakOn.TV,
and I'll see you soon.

72
00:05:42.710 --> 00:05:48.219
[MUSIC]

