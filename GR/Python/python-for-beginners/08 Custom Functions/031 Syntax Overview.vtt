WEBVTT

1
00:00:00.000 --> 00:00:04.575
[MUSIC]

2
00:00:04.575 --> 00:00:08.860
>> Welcome back to Learn to Program.TV and
course on Python.

3
00:00:08.860 --> 00:00:14.900
So, in this video I'll be showing you the
both, basic syntax of creating a function.

4
00:00:14.900 --> 00:00:18.050
In the past we've looked over functions
such as join, split.

5
00:00:18.050 --> 00:00:20.510
And, count and so on.

6
00:00:20.510 --> 00:00:24.820
And what these functions do is you have a
set amount of code within them

7
00:00:24.820 --> 00:00:29.810
and you send them a parameter and it will
work out something and return the value.

8
00:00:29.810 --> 00:00:31.720
Depending on what the function is depends
on what value

9
00:00:31.720 --> 00:00:34.620
is return and what input you need to give
to it.

10
00:00:34.620 --> 00:00:38.110
And so, we can actually create our own
functions as well.

11
00:00:38.110 --> 00:00:40.130
And, they provide the exact same.

12
00:00:40.130 --> 00:00:41.290
Purpose as this.

13
00:00:41.290 --> 00:00:46.670
It saves you from repeating lots of code
which you don't need to anymore than once.

14
00:00:46.670 --> 00:00:52.160
So if you need to call a function 20
times, say if you were creating something

15
00:00:52.160 --> 00:00:56.190
which validates or checks the user input
just

16
00:00:56.190 --> 00:00:59.070
you reverse device type, type of input for
example.

17
00:00:59.070 --> 00:01:02.370
Then you'd be able to validate it using
one function

18
00:01:02.370 --> 00:01:05.270
and have to only write the code for
validation once.

19
00:01:05.270 --> 00:01:07.680
Rather than writing it each individual
time in

20
00:01:07.680 --> 00:01:10.730
which you are getting input from the user.

21
00:01:10.730 --> 00:01:12.990
So it saves on file space and also it

22
00:01:12.990 --> 00:01:15.390
makes it considerably easier and faster
for you to code.

23
00:01:17.220 --> 00:01:21.620
So, a function has to be defined and we do
that using the def keyword.

24
00:01:21.620 --> 00:01:23.370
Which is def.

25
00:01:23.370 --> 00:01:25.630
And after that we type in the function
name.

26
00:01:25.630 --> 00:01:29.810
And the function name follows the same
conventions as the

27
00:01:32.090 --> 00:01:33.740
as variable names go.

28
00:01:33.740 --> 00:01:38.090
So you don't have numbers to start it, you
have numbers in it if you want to.

29
00:01:38.090 --> 00:01:39.580
And you can have underscores.

30
00:01:39.580 --> 00:01:43.990
You can't use other symbols, and you can
use upper and lowercase letters.

31
00:01:45.530 --> 00:01:49.370
And after we have the function name, what
we

32
00:01:49.370 --> 00:01:54.090
have is two brackets or parenth,
parentheses opening and closing.

33
00:01:54.090 --> 00:01:57.370
And in, inside of that we have as many
parameters as we want.

34
00:01:57.370 --> 00:02:00.770
And so I'll just do param1 and param2.

35
00:02:00.770 --> 00:02:03.680
Now within these parameters I'll be
getting

36
00:02:03.680 --> 00:02:05.940
onto more detail in the next video.

37
00:02:05.940 --> 00:02:12.680
However, these prompters are defined, and
they are treated like variables.

38
00:02:12.680 --> 00:02:16.340
Now, within this function I won't actually
be using prompters, I'll just be

39
00:02:16.340 --> 00:02:19.420
leaving those for now, because I'll be
covering those in the next video.

40
00:02:19.420 --> 00:02:23.700
However, after we have the function name
declared.

41
00:02:23.700 --> 00:02:28.710
You'll, we'll have a column which we use
for all types of structural declarations,

42
00:02:28.710 --> 00:02:33.000
and after that we can have, this line is
now optional, but we can have a tag line,

43
00:02:33.000 --> 00:02:43.660
so if I type in, this is a tagline, and
then what we can do is, just return Hello.

44
00:02:43.660 --> 00:02:46.390
And I'll get more information on the.

45
00:02:46.390 --> 00:02:49.430
Return in a few minutes what function.

46
00:02:49.430 --> 00:02:52.540
What we can do is if on a Mac,

47
00:02:52.540 --> 00:02:56.770
you press control and enter, control and
space sorry.

48
00:02:56.770 --> 00:03:01.690
You, it loads up the list of all of the
functions which were available.

49
00:03:01.690 --> 00:03:04.250
Now if you scroll down to function name
and click on

50
00:03:04.250 --> 00:03:07.270
it, you'll see that we have the, this is a
tagline there.

51
00:03:07.270 --> 00:03:12.700
So, you can use this now, to quite simply,
just provide some information for you,

52
00:03:12.700 --> 00:03:18.300
so you can see exactly what it does when
when you're looking at the actual code.

53
00:03:18.300 --> 00:03:21.800
So, if you load this up, you can have
something, a sentence in there

54
00:03:21.800 --> 00:03:25.750
which tells you what the actual code does,
just as sort of reminder for you.

55
00:03:27.720 --> 00:03:31.180
So, after, after we have the line with the
quotes.

56
00:03:31.180 --> 00:03:32.830
Where you can have as much as you want.

57
00:03:32.830 --> 00:03:35.130
We can have if statements, we can have

58
00:03:37.540 --> 00:03:40.520
all sorts of variables being called, and

59
00:03:40.520 --> 00:03:42.600
other functions being called that are in
here.

60
00:03:42.600 --> 00:03:43.900
We can do as many things as we want.

61
00:03:43.900 --> 00:03:49.360
And then at the end we just need to return
the data that we have.

62
00:03:49.360 --> 00:03:51.080
Set out a return.

63
00:03:51.080 --> 00:03:53.590
So, here we're just returning hello, so
what I'm going to

64
00:03:53.590 --> 00:03:58.670
do print, and then I'll do function, name,
and if we run

65
00:03:58.670 --> 00:04:03.240
this you'll see that we get hello
outputted, which is exactly what

66
00:04:03.240 --> 00:04:06.750
you'd expect to get outputted, because we
are returning the word hello.

67
00:04:06.750 --> 00:04:10.470
Now, we can return variables, we can
return booleans.

68
00:04:10.470 --> 00:04:13.060
So there's plenty of things that we can
return, and if I was

69
00:04:13.060 --> 00:04:16.670
to return a boolean, then you'd use it
more with any if statement.

70
00:04:16.670 --> 00:04:20.530
And if something is true then do
something,

71
00:04:20.530 --> 00:04:22.900
if something is not true then do something
else.

72
00:04:22.900 --> 00:04:23.780
For example.

73
00:04:25.050 --> 00:04:28.400
So that is the main basic syntax on.

74
00:04:28.400 --> 00:04:30.810
Functions, and in later videos I'll be
explaining the

75
00:04:30.810 --> 00:04:36.550
purpose behind each individual part of the
actual function call.

76
00:04:36.550 --> 00:04:38.064
So thank you for watching, and I will see
you soon.

77
00:04:38.064 --> 00:04:43.389
[MUSIC]

