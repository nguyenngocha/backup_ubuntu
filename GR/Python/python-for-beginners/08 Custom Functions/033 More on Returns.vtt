WEBVTT

1
00:00:00.000 --> 00:00:04.918
[MUSIC]

2
00:00:04.918 --> 00:00:06.600
I'm Alex Bowers, LearnToProgram.tv.

3
00:00:06.600 --> 00:00:08.785
And in this video, I'll be talking more
about

4
00:00:08.785 --> 00:00:11.993
the return statement, which are used
within functions in Python.

5
00:00:11.993 --> 00:00:14.439
So, I'm just going to create a new file.

6
00:00:14.439 --> 00:00:18.524
And I'll just call this return [SOUND] py.

7
00:00:18.524 --> 00:00:21.584
[SOUND].

8
00:00:21.584 --> 00:00:25.230
Now once this is done we're just gonna
create a very basic function which

9
00:00:25.230 --> 00:00:27.419
won't do anything really, except for it'll

10
00:00:27.419 --> 00:00:29.681
have a value which will, we'll be
returning.

11
00:00:31.790 --> 00:00:37.507
Okay, so if we just create a function, and
let's call this a function.

12
00:00:37.507 --> 00:00:40.482
[SOUND] And then just return.

13
00:00:40.482 --> 00:00:47.434
[SOUND] Just return hello and that'll work
fine.

14
00:00:47.434 --> 00:00:50.730
And now if we just do print, function.

15
00:00:52.860 --> 00:00:53.839
Now if we run this,

16
00:00:56.520 --> 00:00:59.390
you'll be able to tell what I'll return
here is

17
00:00:59.390 --> 00:01:02.172
hello, so this will return a string of
hello because

18
00:01:02.172 --> 00:01:05.180
we were setting as a string, however, if
we don't

19
00:01:05.180 --> 00:01:10.160
actually return anything, so if we just
have return blank.

20
00:01:10.160 --> 00:01:12.220
Then [INAUDIBLE] return something called
non.

21
00:01:12.220 --> 00:01:17.160
Now non is a prebuilt feature of, of
Python,

22
00:01:17.160 --> 00:01:19.786
and quite a lot of languages call it null,
instead.

23
00:01:19.786 --> 00:01:25.140
It just means that there's no actual value
sent, but, and the significance of this is

24
00:01:25.140 --> 00:01:31.390
that if you actually create a function,
you have to have a return sent.

25
00:01:31.390 --> 00:01:35.310
Now, if you don't actually want to return
anything, then you just return non.

26
00:01:35.310 --> 00:01:39.560
And you can do a check for that, quite
simply with the function,

27
00:01:39.560 --> 00:01:44.940
and by doing an if statement with the
function, or something along those lines.

28
00:01:44.940 --> 00:01:48.330
So a return statement is always required.

29
00:01:48.330 --> 00:01:50.470
You can't actually get around using them,
if you don't

30
00:01:50.470 --> 00:01:55.750
have them, then it, doesn't work properly
and as you can

31
00:01:55.750 --> 00:01:58.320
see, we get a syntax error here, and I'll
run this

32
00:01:58.320 --> 00:02:02.700
and I'll show you, there we go expected an
indented block.

33
00:02:02.700 --> 00:02:05.190
Because it's not actually ended the
function.

34
00:02:05.190 --> 00:02:07.080
And so expect it to be part of

35
00:02:07.080 --> 00:02:11.690
the actual function, so, return actually
ends the function.

36
00:02:11.690 --> 00:02:14.835
It tells it that it's time to exudative to

37
00:02:14.835 --> 00:02:17.775
whatever is after that, doesn't need to
actually carry on.

38
00:02:17.775 --> 00:02:21.968
[SOUND] So, if we were to run this again,
you can see that now

39
00:02:21.968 --> 00:02:27.113
there's no syntax error, and we can return
any type of volume we want.

40
00:02:27.113 --> 00:02:30.152
[SOUND] So we can return integers.

41
00:02:30.152 --> 00:02:34.768
We can return [SOUND] we can

42
00:02:34.768 --> 00:02:40.200
return lists, if we choose to.

43
00:02:40.200 --> 00:02:43.340
We can return absolutely any type of data
that we wish,

44
00:02:43.340 --> 00:02:46.630
and we can all interact with this data in
different ways.

45
00:02:46.630 --> 00:02:51.708
So we could have it stored as a variable.

46
00:02:51.708 --> 00:02:57.977
[SOUND] In which case [SOUND] here

47
00:02:57.977 --> 00:03:04.496
we'll have the variable now is

48
00:03:04.496 --> 00:03:11.024
equal to none, so if we did if.

49
00:03:11.024 --> 00:03:18.552
If we did that sorry [SOUND] sorry, none
is a keyword.

50
00:03:18.552 --> 00:03:24.490
So you don't need to put quotes around it,
and you can see that, that's true, so that

51
00:03:24.490 --> 00:03:27.343
variable is now stored in the actual, is
the

52
00:03:27.343 --> 00:03:31.541
word, stored in the word none, body
structure none.

53
00:03:31.541 --> 00:03:36.200
Okay, so as you can see because we require
the return

54
00:03:36.200 --> 00:03:41.800
statement, you have to actually have it
built into your function.

55
00:03:41.800 --> 00:03:45.192
And we'll get more onto how to use it
properly, later on within

56
00:03:45.192 --> 00:03:49.224
the course, however, just remember that if
you don't have it, then that

57
00:03:49.224 --> 00:03:53.000
will be a, a huge disadvantage because it
does mean that your function

58
00:03:53.000 --> 00:03:57.556
isn't working properly, and you will have
to rewrite part of the code, probably.

59
00:03:57.556 --> 00:04:00.283
So, thank you for watching, and I will see
you soon.

60
00:04:00.283 --> 00:04:05.229
[MUSIC]

