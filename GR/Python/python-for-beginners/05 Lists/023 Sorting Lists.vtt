WEBVTT

1
00:00:00.000 --> 00:00:04.994
[MUSIC]

2
00:00:04.994 --> 00:00:07.930
There's two functions that can be used to
sort a list.

3
00:00:07.930 --> 00:00:11.290
And these sort it numerically, or
alphabetically, depending on

4
00:00:11.290 --> 00:00:13.120
what sort of content you have within your
list.

5
00:00:14.570 --> 00:00:16.040
So as you can here, I've got a list

6
00:00:16.040 --> 00:00:18.430
which is just random numbers between one
and five.

7
00:00:18.430 --> 00:00:23.410
However, it is not in numerical order, it
goes 1, 3, 4, 2,5.

8
00:00:23.410 --> 00:00:25.700
So now, if I was to actually sort that
list,

9
00:00:27.880 --> 00:00:32.451
and print out the list, you can see that
it is now printed as 1,2,3,4, and 5.

10
00:00:33.740 --> 00:00:37.770
Now, this is quite a useful concept
because if you

11
00:00:37.770 --> 00:00:40.450
have certain date and content which you
need to be

12
00:00:40.450 --> 00:00:43.450
in a specific order, then the sort
function does it

13
00:00:43.450 --> 00:00:45.989
for you, you don't need to actually do any
ordering yourself.

14
00:00:47.350 --> 00:00:49.790
Now there's also another way in which you
can do this.

15
00:00:49.790 --> 00:00:55.910
Which cuz, because this value, here is
stored within the actual list is,

16
00:00:55.910 --> 00:01:01.650
changing get based on it's current,
variable if you were to actually do list.

17
00:01:01.650 --> 00:01:05.390
Two, you can actually do a function called
sorted,

18
00:01:07.450 --> 00:01:12.770
which then allows us to sort that list and
store it as

19
00:01:12.770 --> 00:01:18.130
a new variable, it creates a copy of it
instead, and it has the exact same output.

20
00:01:18.130 --> 00:01:21.790
However, this creates a copy of itself
whereas,

21
00:01:21.790 --> 00:01:25.560
the previous dot sort does not create a
copy.

22
00:01:25.560 --> 00:01:30.890
It just sorts it within itself, but if you
wanted it sorting from high number to low

23
00:01:30.890 --> 00:01:36.290
number, all you have to do is list
two.reverse.

24
00:01:36.290 --> 00:01:39.265
And with this, you now have 5,4,3,2,1.

25
00:01:40.470 --> 00:01:44.980
So, these two main functions which you can
use for sorting an, a list.

26
00:01:44.980 --> 00:01:48.900
Within Python and it is a very useful
concept to be.

27
00:01:48.900 --> 00:01:52.740
To be able to, sort the list numerically
or alphabetically.

28
00:01:52.740 --> 00:01:54.740
So, thank you for watching, and I will see
you soon.

29
00:01:54.740 --> 00:01:54.790
[MUSIC]

