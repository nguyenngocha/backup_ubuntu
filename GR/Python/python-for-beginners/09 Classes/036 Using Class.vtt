WEBVTT

1
00:00:00.000 --> 00:00:05.145
[MUSIC]

2
00:00:05.145 --> 00:00:07.834
So the first thing we need to do with
classes, is to

3
00:00:07.834 --> 00:00:10.790
find that we want to call a class, or to
create a class.

4
00:00:10.790 --> 00:00:13.050
And we do that using class keyword, and
then

5
00:00:13.050 --> 00:00:16.350
we, give it, the name we wish to give it.

6
00:00:16.350 --> 00:00:21.530
And in this case, I will call this person,
and then on the next

7
00:00:21.530 --> 00:00:25.960
line, we put colons again to show that
we're now working in this area.

8
00:00:27.540 --> 00:00:29.620
And so what we can do here is we can

9
00:00:29.620 --> 00:00:33.740
give it attributes of variables, so I'll
call this one

10
00:00:38.740 --> 00:00:42.640
actually no, I'll give it a definition
first init, and what

11
00:00:42.640 --> 00:00:44.860
we do here is we have to pass it to self.

12
00:00:44.860 --> 00:00:49.740
They'll have to parse it say gender, and
name, and these are two things

13
00:00:49.740 --> 00:00:54.540
which we're going to parse in whenever we
initialize this function in this class.

14
00:00:54.540 --> 00:00:59.210
And they will get parsed in automatically,
and we can do something with these,

15
00:00:59.210 --> 00:01:02.580
which, is something that you should do
most of the time whenever you use it.

16
00:01:02.580 --> 00:01:11.220
This sort of object orientated programming
[UNKNOWN] self.gender is equal to gender.

17
00:01:11.220 --> 00:01:15.630
Now that might seem sort of trivial but
what that allows it

18
00:01:15.630 --> 00:01:20.780
to do, is because self is contained within
the class, self can now

19
00:01:20.780 --> 00:01:23.240
be called within any function within the
class, where if it was

20
00:01:23.240 --> 00:01:25.960
gender and name, we would have to pass it
in every single time.

21
00:01:25.960 --> 00:01:28.000
But because we're initializing a class
here

22
00:01:29.620 --> 00:01:31.040
whenever we do initialize the class and

23
00:01:31.040 --> 00:01:34.810
we parse in this data, we only want this
data to be within one class.

24
00:01:34.810 --> 00:01:38.650
And that is what an object a, that is what
a class would allow us to do.

25
00:01:38.650 --> 00:01:42.100
It will con, contain it within the one
object of the one instance of the class.

26
00:01:44.570 --> 00:01:47.530
So, if we do self.name if you've got a
name.

27
00:01:51.370 --> 00:01:55.250
And that will allow us to, again parse in
a name [UNKNOWN] wants.

28
00:01:55.250 --> 00:01:58.800
So now, if I do a def, and I'll call this
one display, and all I'll

29
00:01:58.800 --> 00:02:03.790
have to do is pass in a self, and all the
data is now within self.

30
00:02:03.790 --> 00:02:09.030
So here, then all I need to here is do
print, and I'll do

31
00:02:11.120 --> 00:02:12.880
your A,

32
00:02:15.420 --> 00:02:21.311
and then I'll do self.gender.

33
00:02:21.311 --> 00:02:27.189
And then I will do add your

34
00:02:27.189 --> 00:02:33.640
name is self.name.

35
00:02:33.640 --> 00:02:34.140
We should

36
00:02:36.160 --> 00:02:40.990
have another comma there, and if we run
this, and I'm not quite ready yet.

37
00:02:40.990 --> 00:02:44.400
And next what we need to do is initialize
its.

38
00:02:44.400 --> 00:02:47.320
The way to do this is we create a
variable, so I'll call this one,

39
00:02:50.770 --> 00:02:51.270
people

40
00:02:54.400 --> 00:02:58.490
and then is equal to, I'll name it to
Person and

41
00:02:58.490 --> 00:03:01.940
within these brackets we need to now pass
in gender and name.

42
00:03:01.940 --> 00:03:07.350
So gender, we're going to put male, and
name is Alex.

43
00:03:07.350 --> 00:03:12.665
And now if we actually run this, so if we
do people.display.

44
00:03:14.090 --> 00:03:19.780
And click Run, then you'll see you get
you're a male and your name is Alex.

45
00:03:19.780 --> 00:03:27.030
Which is past these two, these two
variables passed into initialization.

46
00:03:27.030 --> 00:03:31.760
Which is a pre-built function, which we
have to define anyway.

47
00:03:31.760 --> 00:03:35.440
And that is, whenever something is called,
and it gets initialized.

48
00:03:35.440 --> 00:03:38.170
And so, whatever fables are in here, get
passed

49
00:03:38.170 --> 00:03:43.280
to the 2nd, 3rd, and so on, fables within
the

50
00:03:45.460 --> 00:03:46.030
within the class.

51
00:03:48.670 --> 00:03:50.660
As you can see here, we've got
self.gender,

52
00:03:50.660 --> 00:03:53.270
now that's something we haven't actually
seen yet before.

53
00:03:53.270 --> 00:03:55.720
And that just means that,um, self is an

54
00:03:55.720 --> 00:03:58.800
object, and gender is available within
that object.

55
00:03:58.800 --> 00:04:02.700
So, when we're parsing self in, that
allows us to access

56
00:04:02.700 --> 00:04:06.310
any of the attributes that we are
associating with this class.

57
00:04:06.310 --> 00:04:10.424
So, any variable that is within the class
we can call up by doing self.gender.

58
00:04:10.424 --> 00:04:13.469
Or self.name or self.whatever.

59
00:04:13.469 --> 00:04:16.350
And we can also call self dot.

60
00:04:16.350 --> 00:04:18.750
And we can also call functions that way.

61
00:04:18.750 --> 00:04:20.590
So here we could do self.display if we
wanted

62
00:04:20.590 --> 00:04:25.160
to call display within this actual class,
for whatever reason.

63
00:04:25.160 --> 00:04:28.920
So if we had say a validation function or
something

64
00:04:30.380 --> 00:04:33.700
we would be able to call that within
another function.

65
00:04:33.700 --> 00:04:35.740
And have it process itself.

66
00:04:35.740 --> 00:04:38.820
All you have to do is just put a self dot
in front of it.

67
00:04:38.820 --> 00:04:41.430
So that is a quick overview of how to use
the

68
00:04:41.430 --> 00:04:45.790
class attribute, or the class keyword and
how to define a class.

69
00:04:45.790 --> 00:04:47.762
We'll be covering more about methods in
the

70
00:04:47.762 --> 00:04:49.849
next video, and then, so I'll see you
soon.

71
00:04:49.849 --> 00:04:54.849
[MUSIC]

