WEBVTT

1
00:00:00.000 --> 00:00:05.263
[MUSIC]

2
00:00:05.263 --> 00:00:09.469
Hello I'm Alex Bouche from
learntoprogram.tv and in this video

3
00:00:09.469 --> 00:00:13.810
I'll be teaching you the very basics of
variables within Python.

4
00:00:13.810 --> 00:00:19.390
So then first thing we need to do is
create a new page, a new file rather

5
00:00:19.390 --> 00:00:25.140
and we'll just call this one variables.py.

6
00:00:25.140 --> 00:00:27.680
Once we've done that then le, all we're
going

7
00:00:27.680 --> 00:00:30.240
to do is just run some very simple code.

8
00:00:30.240 --> 00:00:32.820
I'll explain what these, this code means
in later videos.

9
00:00:33.820 --> 00:00:36.730
This is just to show you how you set up a
variable.

10
00:00:36.730 --> 00:00:40.650
So a variable is defined by a name.

11
00:00:40.650 --> 00:00:45.720
Which you can call whatever you want, but
it does follow certain rules.

12
00:00:45.720 --> 00:00:50.760
So the name, I can just type it like this
and that will be a variable called name.

13
00:00:50.760 --> 00:00:56.709
However, and, it could have name_1, and

14
00:00:56.709 --> 00:01:03.240
name_alex, nameAlex.

15
00:01:03.240 --> 00:01:11.240
But it can not start with a number and it
cannot have searches and bull switches,

16
00:01:11.240 --> 00:01:18.210
stars and slashes within it, because they
mean something different within Python.

17
00:01:18.210 --> 00:01:24.120
So, as a general rule you either have two
ways different ways of writing your

18
00:01:26.470 --> 00:01:29.780
of writing your variables, and these are
two different conventions.

19
00:01:29.780 --> 00:01:31.160
The first one's called Camel Casing,

20
00:01:33.510 --> 00:01:37.410
which is where you write it as such where
each new word starts with,

21
00:01:39.470 --> 00:01:45.890
a new capital, and that makes it so you
can sort of read what it is, what it does.

22
00:01:45.890 --> 00:01:47.760
The other way is to use underscore.

23
00:01:54.170 --> 00:01:56.100
You can use whichever method you prefer.

24
00:01:56.100 --> 00:02:00.210
I'm going to be using camel casing within
these videos.

25
00:02:02.090 --> 00:02:04.000
So if you decide you do want to use

26
00:02:04.000 --> 00:02:07.230
capital casings then you should follow
exactly what I write.

27
00:02:07.230 --> 00:02:08.620
If you decide you want to use underscores

28
00:02:08.620 --> 00:02:10.560
instead because you find it easier to
read.

29
00:02:10.560 --> 00:02:12.010
Where ever I have a capital letter just

30
00:02:12.010 --> 00:02:15.640
replace it with an _ and the lowercase
letter.

31
00:02:15.640 --> 00:02:18.530
Now the reason you follow, people those
conventions.

32
00:02:18.530 --> 00:02:20.330
Is simply because it makes the code more
readable.

33
00:02:20.330 --> 00:02:23.420
So if you were to run into problems and
you needed somebody else's help.

34
00:02:23.420 --> 00:02:24.690
You send them the file they'll be able

35
00:02:24.690 --> 00:02:28.100
to read, easily, what each of your
valuables are.

36
00:02:28.100 --> 00:02:30.410
If you have everything in lowercase, then

37
00:02:33.130 --> 00:02:34.460
it's harder to read.

38
00:02:34.460 --> 00:02:36.180
And, as you can see, although that is a
very

39
00:02:36.180 --> 00:02:40.360
short and easy sentence, it is a confusing
thing to read.

40
00:02:40.360 --> 00:02:45.068
It is much easier if it was camel cased or
with underscores.

41
00:02:45.068 --> 00:02:49.060
So the next thing that we need to cover
within variables is

42
00:02:49.060 --> 00:02:54.758
if we had a variable, and I'll just call
this one number.

43
00:02:54.758 --> 00:02:58.844
Now, to assign a value to it, you have to

44
00:02:58.844 --> 00:03:03.426
just do an equal sign and then [SOUND] a
number.

45
00:03:03.426 --> 00:03:11.011
And then what you're going to do [SOUND]
if we print the number.

46
00:03:11.011 --> 00:03:15.204
[SOUND] Then that is perfectly fine, and
that is more work.

47
00:03:15.204 --> 00:03:18.760
And if we run this script.

48
00:03:18.760 --> 00:03:20.720
You'll see where you get the output of 42.

49
00:03:20.720 --> 00:03:25.330
If I was to change this to 500, you'll see
we get the output of 500.

50
00:03:25.330 --> 00:03:29.660
So, everything works exactly as you'd
expect it to.

51
00:03:29.660 --> 00:03:31.750
But a variable is made up of three

52
00:03:31.750 --> 00:03:34.040
different things and that is because in
Python it

53
00:03:34.040 --> 00:03:37.160
is considered to be a object, and every

54
00:03:37.160 --> 00:03:39.530
single type variable is considered to be
an object.

55
00:03:40.930 --> 00:03:42.620
So, as it is with all code

56
00:03:42.620 --> 00:03:46.410
within Python because it's an object
orientated language.

57
00:03:46.410 --> 00:03:47.430
You don't really need to know what that

58
00:03:47.430 --> 00:03:51.270
means, it just means that everything
revolves around a

59
00:03:51.270 --> 00:03:54.640
certain way of structuring your code which
I'll

60
00:03:54.640 --> 00:03:57.390
get into late, again later on in these
videos.

61
00:03:58.480 --> 00:04:04.280
And so what we can do is check what the ID
of a variable is.

62
00:04:04.280 --> 00:04:08.260
We can check what the and the value and
the variable

63
00:04:08.260 --> 00:04:11.110
is and we can also check what the type of
variable is.

64
00:04:11.110 --> 00:04:18.690
And the way we do this is we do ID number
and that will allow us

65
00:04:22.640 --> 00:04:23.787
oh, sorry we need to print that out.

66
00:04:28.480 --> 00:04:31.050
And doing that, there you go, you see we
get a unique

67
00:04:31.050 --> 00:04:34.570
number, and every single variable that we
create will have a different number.

68
00:04:34.570 --> 00:04:42.440
And this number is, it's a, a sorta
address on your memories

69
00:04:42.440 --> 00:04:47.190
or your RAM, and that is just where each
one of your variables is stored.

70
00:04:47.190 --> 00:04:51.820
And although we don't use this very often
is usual to

71
00:04:51.820 --> 00:04:54.950
know that each valuable will be stored in
a different place.

72
00:04:54.950 --> 00:05:00.240
And that the variable name is just a
different, is just a nicer, memorable

73
00:05:00.240 --> 00:05:05.840
way of writing each of our numbers or each
of our variables is stored.

74
00:05:05.840 --> 00:05:09.090
Now you can also get the type and I'll
cover data types in a

75
00:05:09.090 --> 00:05:13.010
couple of video's time, but here you can
see we get a class of int.

76
00:05:13.010 --> 00:05:16.740
Int stands for integer and there are
several other ones, which I'll cover later

77
00:05:16.740 --> 00:05:22.370
in this class, which all have very special
purposes and their own special meaning.

78
00:05:22.370 --> 00:05:26.980
And sometimes, if something is the wrong
type then it will cause the code that

79
00:05:26.980 --> 00:05:30.890
you have written to not work properly so
it is useful to understand the different

80
00:05:30.890 --> 00:05:36.860
types and so, als, when, when you're
looking for your code if you

81
00:05:36.860 --> 00:05:42.780
were to debug it, then to use this type
function is quite a useful tool to have.

82
00:05:42.780 --> 00:05:45.010
Where it says class there, that just means
it is an object.

83
00:05:45.010 --> 00:05:48.340
So you can ignore that, because we will be
covering classes later

84
00:05:48.340 --> 00:05:52.480
on, but it's not something you really need
to understand at this moment.

85
00:05:52.480 --> 00:05:54.840
So thank you for watching, I'll see you in
a later video.

86
00:05:54.840 --> 00:05:57.355
And I'm Max Bowers from learntoprogram.tv.

87
00:05:57.355 --> 00:06:02.519
[MUSIC]

