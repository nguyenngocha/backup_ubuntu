WEBVTT

1
00:00:00.000 --> 00:00:04.744
[MUSIC]

2
00:00:04.744 --> 00:00:09.120
Within Python, there are things called
leaps, or iteration.

3
00:00:09.120 --> 00:00:10.990
And they behave in exactly the same thing.

4
00:00:10.990 --> 00:00:13.190
It just means a way of getting nervous

5
00:00:13.190 --> 00:00:16.220
when things constantly entail is no longer
true.

6
00:00:16.220 --> 00:00:18.760
And the simplest one of these is called
the wild loop.

7
00:00:18.760 --> 00:00:21.440
So the keyword is wild and then you

8
00:00:21.440 --> 00:00:24.930
have the if statement, sort of expression
between that.

9
00:00:24.930 --> 00:00:28.883
So if and A is less than 100.

10
00:00:28.883 --> 00:00:33.408
[SOUND] And now, it's going to print A.

11
00:00:33.408 --> 00:00:37.960
And what we're going to do here is we're
going to do A plus equals 1.

12
00:00:37.960 --> 00:00:40.260
Now, what that does, is it adds 1, it

13
00:00:40.260 --> 00:00:44.110
increments it by one each time, the loop
runs.

14
00:00:44.110 --> 00:00:46.755
And say, if we should start this off with
A is equal to 0.

15
00:00:48.820 --> 00:00:53.520
What we should have after we've finished
this, and what we do get is a

16
00:00:53.520 --> 00:00:58.570
loop where 1, where A is equal to 0 all
the way through to 99.

17
00:00:58.570 --> 00:01:02.280
Now the reason it doesn't go to 100 is
because it's less than 100.

18
00:01:02.280 --> 00:01:05.070
If we did less than or equal to 100, then
it

19
00:01:05.070 --> 00:01:07.429
would equal 100 by the time it gets to the
end.

20
00:01:08.700 --> 00:01:14.290
So we'll go from 0 to 100, and this can be
done with any type of

21
00:01:14.290 --> 00:01:21.240
operator as long as it fits the, idea that
something must be true for it to be ran.

22
00:01:21.240 --> 00:01:24.470
So, after is gets to 100 it is no longer
true, it

23
00:01:24.470 --> 00:01:29.190
is, it is equal to 100 and therefore it
doesn't execute anymore.

24
00:01:29.190 --> 00:01:33.010
And so it will go down and do the next
line here,

25
00:01:33.010 --> 00:01:35.290
what you're going to want to do it
[INAUDIBLE] this is finished.

26
00:01:36.490 --> 00:01:40.590
And if we run this again, we'll get to the
end, and we get

27
00:01:40.590 --> 00:01:43.320
this finished right at the very end, but
we don't get to anywhere else.

28
00:01:43.320 --> 00:01:46.280
And that is because the next bit of code
does not run until the wild

29
00:01:46.280 --> 00:01:51.230
loop has reached a point of which it no
longer considers it to be true.

30
00:01:51.230 --> 00:01:56.710
Now the reason why this could be bad, is
if we had something where it no

31
00:01:56.710 --> 00:02:02.630
longer actually made a difference, where
it didn't change, for example.

32
00:02:02.630 --> 00:02:05.340
So if we missed off the plus here by
accident, we could

33
00:02:05.340 --> 00:02:09.210
run this and we'd just get infinite loop
and it'd keep running constantly.

34
00:02:10.380 --> 00:02:11.780
And visit stops with an x.

35
00:02:11.780 --> 00:02:13.590
If you gots some beans which happens like

36
00:02:13.590 --> 00:02:16.040
that, well it just constantly here an
imply.

37
00:02:16.040 --> 00:02:19.056
You can see here I've got a huge list of
just

38
00:02:19.056 --> 00:02:23.230
ones, because there is a problem with the
code try root.

39
00:02:23.230 --> 00:02:27.070
I miss of the plus sing and therefore
created a sub of infinite loop, cuz it

40
00:02:27.070 --> 00:02:31.250
always be less than a 100, 1 is less than
a 100, it always be true.

41
00:02:31.250 --> 00:02:32.760
So you can always press the start button
there

42
00:02:32.760 --> 00:02:36.150
to stop executing and check your code for
any problems.

43
00:02:36.150 --> 00:02:38.240
You will notice that there was an error
appeared even though

44
00:02:38.240 --> 00:02:41.795
it was an infinite loop which is something
you'd never want to

45
00:02:41.795 --> 00:02:45.080
happen within your code because it will
simply just use up your

46
00:02:45.080 --> 00:02:49.510
resources like your ramp so quickly, it
will just burn through it.

47
00:02:50.510 --> 00:02:53.310
And so, you never want to have an infinite
loop.

48
00:02:53.310 --> 00:02:58.760
However, it isn't considered an error
because the, syntax of it is

49
00:02:58.760 --> 00:03:01.870
completely correct and there is nothing
wrong with how it was written.

50
00:03:01.870 --> 00:03:04.160
It's just that it doesn't do what it
should do.

51
00:03:04.160 --> 00:03:07.050
Cuz you should never end up with an
infinite loop.

52
00:03:08.220 --> 00:03:10.660
So that's the while loop, and that is the
easiest

53
00:03:10.660 --> 00:03:15.470
way of doing an iteration or a loop within
Python.

54
00:03:15.470 --> 00:03:17.412
So thank you for watching and I'll see you
soon.

55
00:03:17.412 --> 00:03:17.462
[MUSIC]

