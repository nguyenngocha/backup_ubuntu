WEBVTT

1
00:00:01.090 --> 00:00:03.860
For this second to last exercise of the
chapter, we're going

2
00:00:03.860 --> 00:00:07.770
to write a function to compute the
factorial of a number.

3
00:00:07.770 --> 00:00:10.940
We did this earlier in the course, where
we were studying for loops.

4
00:00:10.940 --> 00:00:14.040
But it's most often computed using a
function, so

5
00:00:14.040 --> 00:00:16.370
let's see how to write that function in
Python.

6
00:00:16.370 --> 00:00:20.803
So we're gonna call this program
chap11ex2.py.

7
00:00:22.900 --> 00:00:25.060
Lets get started right off with the
function, which we're

8
00:00:25.060 --> 00:00:28.810
gonna call fact, to save a little bit of
typing.

9
00:00:28.810 --> 00:00:31.530
And so the parameter will be a number.

10
00:00:31.530 --> 00:00:36.100
We start off by creating a variable
product and assigning it the value 1.

11
00:00:36.100 --> 00:00:38.690
It's going to store our running product.

12
00:00:38.690 --> 00:00:42.740
Then we write a for loop ranges from one.

13
00:00:42.740 --> 00:00:47.060
Through the number entered plus one for
each number in

14
00:00:47.060 --> 00:00:51.050
the range from one to the number that we
entered.

15
00:00:51.050 --> 00:00:57.540
We simply multiply that number by the
product and store it back in the product.

16
00:00:57.540 --> 00:00:59.870
And that will give us the factorial, so
that

17
00:00:59.870 --> 00:01:03.580
our last step is to return that valued
product.

18
00:01:03.580 --> 00:01:05.530
And there's our function.

19
00:01:05.530 --> 00:01:10.650
So in our program to test the function,
we'll prompt the user to enter a value.

20
00:01:10.650 --> 00:01:14.350
We'll get that value using input converted
to int.

21
00:01:16.430 --> 00:01:18.410
And then we'll display the result.

22
00:01:18.410 --> 00:01:18.920
We'll say,

23
00:01:21.970 --> 00:01:22.580
just like so.

24
00:01:25.000 --> 00:01:27.260
So let's exit and save.

25
00:01:30.190 --> 00:01:31.270
And we'll run the program.

26
00:01:32.560 --> 00:01:33.520
Oop, I see what I did.

27
00:01:34.990 --> 00:01:35.440
Try it again.

28
00:01:35.440 --> 00:01:36.580
There we go.

29
00:01:37.880 --> 00:01:42.574
So enter a number, so let's do 5
factorial, 5 factorial is 120.

30
00:01:43.620 --> 00:01:46.150
Let's run it again.

31
00:01:46.150 --> 00:01:49.720
10 factorial, and then just for fun, see
how

32
00:01:49.720 --> 00:01:54.230
well Python handles large numbers, let's
try 100 factorial.

33
00:01:54.230 --> 00:01:58.870
Whoa, so you see how fast factorial
expands.

34
00:01:58.870 --> 00:02:03.610
But you also see how easily Python handles
large numbers.

35
00:02:03.610 --> 00:02:07.570
So that's always an advantage when you're
working with large numbers.

36
00:02:07.570 --> 00:02:09.960
Lets look at the program one more time
just as a review.

37
00:02:11.210 --> 00:02:12.695
And so we see that to compute the

38
00:02:12.695 --> 00:02:15.380
factorial, we simply range from one
through the

39
00:02:15.380 --> 00:02:18.260
number we're trying to compute the
factorial of,

40
00:02:18.260 --> 00:02:21.660
and keep a running product with that
range.

41
00:02:21.660 --> 00:02:25.840
Now, one of the reasons I showed how to
compute factorial again is because

42
00:02:25.840 --> 00:02:31.350
this is going to become the basis for the
first lesson in the next chapter.

43
00:02:31.350 --> 00:02:36.320
The next chapter is a chapter on advanced
functions in Python, and one of

44
00:02:36.320 --> 00:02:38.590
the first examples of advanced functions
we're

45
00:02:38.590 --> 00:02:41.770
going to look at, is the recursive
function.

46
00:02:41.770 --> 00:02:44.670
And recursive functions are functions that
call

47
00:02:44.670 --> 00:02:48.495
themselves in the body of the function.

48
00:02:48.495 --> 00:02:53.010
And factorial is the classic example of a
recursive function.

49
00:02:53.010 --> 00:02:56.420
We're going to take a look at that in the
first lesson of the next chapter.

