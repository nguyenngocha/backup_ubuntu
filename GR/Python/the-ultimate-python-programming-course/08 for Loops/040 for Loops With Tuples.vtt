WEBVTT

1
00:00:01.130 --> 00:00:04.310
In this lesson we're going to examine how
to use 4 loops with tuples.

2
00:00:04.310 --> 00:00:08.830
And in all honesty working with tuples is
very similar to working with this,

3
00:00:08.830 --> 00:00:12.040
but we'll still go through the process
just so you can see how it looks.

4
00:00:12.040 --> 00:00:14.600
So we're going to start a new program.

5
00:00:14.600 --> 00:00:18.770
We'll call it 4 tuples dot p y.

6
00:00:18.770 --> 00:00:22.990
So the first thing we'll do is create a
tuple of 5 numbers, 1, 2, 3, 4 and 5.

7
00:00:22.990 --> 00:00:28.150
This time rather than just display the
numbers.

8
00:00:29.200 --> 00:00:31.310
Let's call that numbers instead of number.

9
00:00:32.600 --> 00:00:33.640
We'll compute the sum.

10
00:00:33.640 --> 00:00:37.880
And we'll also print each number.

11
00:00:39.380 --> 00:00:44.990
And then we'll print, the sum is plus
string sum.

12
00:00:46.380 --> 00:00:47.880
And let's run this first program.

13
00:00:47.880 --> 00:00:54.510
So we'll save, we'll leave it open cuz
we're gonna use it again.

14
00:00:54.510 --> 00:00:56.300
And we'll type fortuples.py.

15
00:00:56.300 --> 00:00:59.360
And there are numbers, and the sum is 15
which is correct.

16
00:01:00.830 --> 00:01:03.510
So let's comment out this code.

17
00:01:03.510 --> 00:01:07.650
And let's look at another example using
strings.

18
00:01:07.650 --> 00:01:11.600
Clearly working with tuples is exactly
like working with lists, so let's look at

19
00:01:11.600 --> 00:01:19.170
a different example, and just demonstrate
how to compute with tuples and for loops.

20
00:01:19.170 --> 00:01:22.820
What we're gonna do is we're gonna create
a tuple of words.

21
00:01:22.820 --> 00:01:25.970
We'll display the words first.

22
00:01:25.970 --> 00:01:26.870
Let's run that code.

23
00:01:26.870 --> 00:01:27.370
Let's

24
00:01:29.260 --> 00:01:30.270
clear the screen.

25
00:01:30.270 --> 00:01:30.770
So

26
00:01:34.800 --> 00:01:35.850
there are our words.

27
00:01:37.210 --> 00:01:40.340
Then we want to figure out which word is
the longest.

28
00:01:40.340 --> 00:01:43.150
So to do that, we're gonna compare the
links

29
00:01:43.150 --> 00:01:45.720
of each word as we go through the list.

30
00:01:45.720 --> 00:01:50.000
What we need to do is, we need to identify
the word that's the longest.

31
00:01:50.000 --> 00:01:54.640
So what we're gonna do is, we're going to
use index to access into the tuple.

32
00:01:55.740 --> 00:02:00.310
And we're gonna create a variable max, and
assign it the index position 0.

33
00:02:00.310 --> 00:02:06.410
So were going to assume that the first
word in the tuple is the longest word.

34
00:02:06.410 --> 00:02:10.940
Then we're going to create a range,
starting at 1, through the

35
00:02:10.940 --> 00:02:14.730
length of the tuple words, and then we're
gonna do a comparison.

36
00:02:14.730 --> 00:02:16.500
So we're going say if the len.

37
00:02:17.720 --> 00:02:23.690
Words sub i is greater than the len of
words sub max.

38
00:02:23.690 --> 00:02:26.640
In other words, 0 position.

39
00:02:26.640 --> 00:02:31.730
Then, max becomes that index value.

40
00:02:31.730 --> 00:02:32.650
And that's all we have to do.

41
00:02:32.650 --> 00:02:39.640
Then we'll say print, the longest word is,
plus words sub max.

42
00:02:39.640 --> 00:02:43.360
So what's going to happen is that we're
going to assume that now is the

43
00:02:43.360 --> 00:02:49.280
longest word that assumption was made when
we set x equals 0 then we'll look at

44
00:02:49.280 --> 00:02:54.930
is and compare it's length to now it's not
the longest so max will not change

45
00:02:54.930 --> 00:02:59.690
then we'll go to time the length of time
is longer then the length of now.

46
00:02:59.690 --> 00:03:02.480
So now max will become that value, which
will be 2.

47
00:03:02.480 --> 00:03:05.280
So right here, max will be assigned 2.

48
00:03:05.280 --> 00:03:11.190
Then we'll compare the next word, the,
which is not longer than time.

49
00:03:11.190 --> 00:03:13.500
So max will end up at 2.

50
00:03:13.500 --> 00:03:17.280
Then when we print the longest word, this
value

51
00:03:17.280 --> 00:03:20.160
will be words sub 2, which will be time.

52
00:03:22.310 --> 00:03:23.560
So let's save the program.

53
00:03:25.460 --> 00:03:26.420
Clear the screen.

54
00:03:29.910 --> 00:03:30.840
And there's our result.

55
00:03:34.120 --> 00:03:40.700
So this for loop is just a very typical
way to find a maximum value in a sequence

56
00:03:40.700 --> 00:03:47.130
of elements by assigning the first element
to be the maximum value.

57
00:03:47.130 --> 00:03:52.740
And then performing a comparison of the
subsequent value and then replacing

58
00:03:52.740 --> 00:03:58.020
the value of max with an index if indeed
some

59
00:03:58.020 --> 00:04:03.570
other element is larger than the initial
element that was assigned by default.

60
00:04:03.570 --> 00:04:06.800
So that wraps up this lesson on for loops
and tuples.

61
00:04:06.800 --> 00:04:08.580
And we're ready to move to the next lesson
where

62
00:04:08.580 --> 00:04:11.830
we're going to examine the use of for
loops with dictionaries.

