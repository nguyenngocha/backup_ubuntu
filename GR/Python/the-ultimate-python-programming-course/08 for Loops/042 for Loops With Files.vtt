WEBVTT

1
00:00:01.130 --> 00:00:03.040
In this lesson, we're gonna see how to use

2
00:00:03.040 --> 00:00:05.990
for loops to process the data in a text
file.

3
00:00:05.990 --> 00:00:08.280
The first thing were gonna do is open up
the new program.

4
00:00:08.280 --> 00:00:11.650
We call this for file dot P-Y.

5
00:00:11.650 --> 00:00:14.490
And let's start off by refreshing our
memory on how

6
00:00:14.490 --> 00:00:18.020
we process files using a while loop from
the last chapter.

7
00:00:18.020 --> 00:00:20.890
So the first thing we do is open the file.

8
00:00:20.890 --> 00:00:23.070
So there's the statement to open the file.

9
00:00:24.070 --> 00:00:25.590
And then we read a line from the file.

10
00:00:26.980 --> 00:00:33.720
Then we say while, print it, and then read
another line.

11
00:00:35.120 --> 00:00:36.430
So let's save this program.

12
00:00:37.680 --> 00:00:39.810
Go back to our prompt.

13
00:00:39.810 --> 00:00:40.780
And run it real quick.

14
00:00:42.730 --> 00:00:46.200
Notice that when we print the line it also
prints

15
00:00:46.200 --> 00:00:48.160
a line feed because remember when we wrote
the data

16
00:00:48.160 --> 00:00:50.590
to the fall we had to write a line feed

17
00:00:50.590 --> 00:00:54.650
and the print command adds it's own line
feed automatically.

18
00:00:54.650 --> 00:00:56.500
Before I show you how to process data with
a

19
00:00:56.500 --> 00:00:59.560
foreloop, let me show you another little
trick you can use.

20
00:00:59.560 --> 00:01:03.550
In the print command we can suppress the
line feed.

21
00:01:03.550 --> 00:01:07.480
Automatically generated by the print
function, by adding this

22
00:01:07.480 --> 00:01:13.220
argument, End equals Open Close single
quote or empty string.

23
00:01:13.220 --> 00:01:14.230
Now, let's save it.

24
00:01:15.550 --> 00:01:17.010
Let's run that program again.

25
00:01:17.010 --> 00:01:17.510
And

26
00:01:19.280 --> 00:01:21.890
so, you see, it suppressed the line feed

27
00:01:21.890 --> 00:01:25.600
that automatically is added in the print
function.

28
00:01:25.600 --> 00:01:28.260
Okay, so now that we've seen how to do
that, let's

29
00:01:28.260 --> 00:01:31.030
now see how to process this file using a
for loop.

30
00:01:31.030 --> 00:01:32.370
It's quite a bit simpler.

31
00:01:32.370 --> 00:01:34.690
I'mma comment out the previous lines.

32
00:01:34.690 --> 00:01:38.840
So, what we're gonna do is we're gonna
say, for line in open.

33
00:01:40.120 --> 00:01:41.950
Print, line, end, equals.

34
00:01:43.380 --> 00:01:47.580
So remember that the four loop works on a
sequence of data.

35
00:01:47.580 --> 00:01:51.660
And a file is nothing more than a sequence
of data, just like a

36
00:01:51.660 --> 00:01:55.330
list or a [UNKNOWN] or any of the other
data structures that we've looked at.

37
00:01:55.330 --> 00:01:58.020
So let's save the file.

38
00:01:58.020 --> 00:01:59.900
We'll come back and look at it again once
we've run it.

39
00:01:59.900 --> 00:02:02.370
[BLANK_AUDIO]

40
00:02:02.370 --> 00:02:03.260
Clear the screen.

41
00:02:04.630 --> 00:02:05.490
And then run our code.

42
00:02:05.490 --> 00:02:11.070
And so you see, we get the same result,
but in quite a few less lines.

43
00:02:11.070 --> 00:02:13.750
It took one, two, three, four, five lines

44
00:02:13.750 --> 00:02:16.580
to run the first program using a while
loop.

45
00:02:16.580 --> 00:02:18.860
And in a for loop, it only takes two
lines.

46
00:02:18.860 --> 00:02:20.840
And quite a bit less processing power.

47
00:02:22.070 --> 00:02:25.740
Now lets look at another example using the
grades file that we wrote

48
00:02:25.740 --> 00:02:29.730
in the last chapter just to remind you
what the file looks like I

49
00:02:29.730 --> 00:02:34.980
will type it out for you real quick so we
have five grades and we are going to

50
00:02:34.980 --> 00:02:40.380
compute the average of those grades using
a formula.

51
00:02:40.380 --> 00:02:45.620
So we need to say sum=0, count=0, and then

52
00:02:45.620 --> 00:02:50.939
we'll say for grade in, open grades.txt.

53
00:02:50.939 --> 00:02:56.950
Sum=sum + int(grade), remember that we
have to convert

54
00:02:56.950 --> 00:03:00.810
grade from string to integer, so we'll do
that there.

55
00:03:00.810 --> 00:03:02.380
count is equal to count plus 1.

56
00:03:02.380 --> 00:03:08.730
Then, we can say average is equal to sum
divided by count.

57
00:03:08.730 --> 00:03:10.770
And then, print the average.

58
00:03:10.770 --> 00:03:16.480
And remember, we have to convert average
to string in the print function.

59
00:03:16.480 --> 00:03:20.500
We might also print the grades just so
that we can

60
00:03:20.500 --> 00:03:23.390
have a record of the grades as we go
through the loop.

61
00:03:23.390 --> 00:03:26.740
All right so there's our code, let's save
the file.

62
00:03:27.920 --> 00:03:34.720
Go back to our command prompt window,
clear the screen and there's our program.

63
00:03:37.670 --> 00:03:39.620
So to review.

64
00:03:39.620 --> 00:03:46.110
Before loop can be used to process a text
file in a much shorter manner

65
00:03:46.110 --> 00:03:50.290
than using a wild loop, as evidenced by
the examples that I've shown you here.

66
00:03:50.290 --> 00:03:55.830
So we've seen 2 examples where we've shown
that we can eliminate at least 3 or 4

67
00:03:55.830 --> 00:03:58.090
lines of code by using a for loop to

68
00:03:58.090 --> 00:04:01.220
process a text file rather than a while
loop.

69
00:04:01.220 --> 00:04:04.730
In most cases especially again when you're
trying to

70
00:04:04.730 --> 00:04:08.190
process all of the data in the file, the
preferred

71
00:04:08.190 --> 00:04:11.550
way to process the file is using the for
loop

72
00:04:11.550 --> 00:04:14.740
and not using the while loop as we
discussed earlier.

73
00:04:14.740 --> 00:04:18.340
So that wraps up this lesson on processing
files with for loops

74
00:04:18.340 --> 00:04:21.960
and we're ready to move onto the first
exercise for the chapter.

