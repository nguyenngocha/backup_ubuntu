WEBVTT

1
00:00:01.230 --> 00:00:04.260
In this chapter we're going to talk about
For Loops.

2
00:00:04.260 --> 00:00:07.570
The for loop is another way to iterate

3
00:00:07.570 --> 00:00:10.820
over a set of statements in python, and
the

4
00:00:10.820 --> 00:00:14.500
for loop has some advantages over the
while loop

5
00:00:14.500 --> 00:00:18.230
when we're working with data structures,
including even files.

6
00:00:18.230 --> 00:00:23.115
And we'll be demonstrating some of those
advantages over the course of the chapter.

7
00:00:23.115 --> 00:00:25.840
Right now in this lesson, I just wanna
introduce the main

8
00:00:25.840 --> 00:00:29.650
idea of a for loop and show you a simple
example.

9
00:00:29.650 --> 00:00:31.830
First though we're gonna look at the
general form of

10
00:00:31.830 --> 00:00:34.660
a for loop, so let me open up a blank
notepad.

11
00:00:34.660 --> 00:00:37.995
The way a for loop is, is we provide

12
00:00:37.995 --> 00:00:43.910
a target variable usually, in some
collection of data.

13
00:00:43.910 --> 00:00:48.370
Then inside that, we have a set of
statements that we perform.

14
00:00:48.370 --> 00:00:53.310
For example, I'll show you this in notepad
before I introduce it in Python.

15
00:00:54.360 --> 00:00:59.880
We might say for i in 1, 2, 3.

16
00:00:59.880 --> 00:01:06.010
Print i will display all of the numbers,
1, 2, 3, in the list.

17
00:01:06.010 --> 00:01:09.030
Where what happens is something called an
iterator,

18
00:01:09.030 --> 00:01:12.370
an internal pointer, works it's way
through the

19
00:01:12.370 --> 00:01:15.620
list, taking each item out of the list,

20
00:01:15.620 --> 00:01:19.350
and placing it in the target, or the
variable.

21
00:01:19.350 --> 00:01:22.580
A lot of times, that's called the loop
control variable.

22
00:01:22.580 --> 00:01:29.620
So, i gets the value 1, then i gets the
value 2, and then i gets the value 3.

23
00:01:29.620 --> 00:01:31.660
Because this is fairly easy to understand,
let's

24
00:01:31.660 --> 00:01:35.000
go ahead and look at it, in Python itself.

25
00:01:36.000 --> 00:01:41.413
So we're gonna call this program
forintro1.py.

26
00:01:42.810 --> 00:01:47.140
And, we'll just go ahead and create a
simple loop, simple for loop.

27
00:01:47.140 --> 00:01:48.860
We'll stop at 5 to make it easy.

28
00:01:48.860 --> 00:01:50.900
[BLANK_AUDIO]

29
00:01:50.900 --> 00:01:52.600
And then, we'll just say, print i.

30
00:01:52.600 --> 00:01:53.100
So,

31
00:01:55.030 --> 00:01:56.230
let's exit and save.

32
00:01:56.230 --> 00:02:00.360
So, here, we have the result with the
code.

33
00:02:00.360 --> 00:02:04.990
And you see how simple it is to write a
for

34
00:02:04.990 --> 00:02:09.380
loop, let's look at another example, let's
bring this back up,

35
00:02:11.560 --> 00:02:20.060
it's coming up as first example, we can
name our list, and say numbers equals.

36
00:02:20.060 --> 00:02:23.570
Then I'll just copy and paste this in,
like so.

37
00:02:24.750 --> 00:02:30.105
And then say for x in numbers, print x.

38
00:02:30.105 --> 00:02:33.330
It's essentially is the same program,
let's save it,

39
00:02:33.330 --> 00:02:34.540
I'm gonna bring it back up in a moment.

40
00:02:34.540 --> 00:02:36.420
Let's clear the screen,

41
00:02:38.870 --> 00:02:40.380
run the example.

42
00:02:40.380 --> 00:02:41.780
And there would see the very same thing.

43
00:02:43.340 --> 00:02:46.150
Let's look at one more example using the
same code.

44
00:02:46.150 --> 00:02:50.840
Let's say we wanna compute the sum of the
numbers in our list.

45
00:02:51.910 --> 00:02:58.120
All we have to do here is add a summing
variable, take out our print statement.

46
00:02:58.120 --> 00:02:59.830
Sum is equal to sum + x.

47
00:03:00.830 --> 00:03:03.640
Then come right down here and say, print
x.

48
00:03:06.470 --> 00:03:07.780
Let's exit this one last time.

49
00:03:07.780 --> 00:03:12.980
And then when we run our code oh, I see
what I did wrong.

50
00:03:12.980 --> 00:03:13.480
Let's

51
00:03:16.630 --> 00:03:17.180
fix that.

52
00:03:18.900 --> 00:03:19.770
Much better.

53
00:03:19.770 --> 00:03:24.480
X is the the last value, but we don't want
the last value, we wanted the sum.

54
00:03:24.480 --> 00:03:28.280
Let's clear the screen, run it again, and
there we get 15.

55
00:03:28.280 --> 00:03:28.780
The

56
00:03:30.380 --> 00:03:34.180
for loop is used to pull values out of a
data structure, so that

57
00:03:34.180 --> 00:03:39.310
we can perform some task on the items that
are in the data structure.

58
00:03:39.310 --> 00:03:42.060
Most often, when we use a for loop, we're

59
00:03:42.060 --> 00:03:45.350
doing so, so we can retrieve all of the
values.

60
00:03:45.350 --> 00:03:47.980
We're trying to get all the values out of
numbers.

61
00:03:47.980 --> 00:03:52.156
Cuz notice, we don't have any limiting
statement here, we just say

62
00:03:52.156 --> 00:03:56.830
4x in numbers, we're just saying, pull out
each value of numbers.

63
00:03:56.830 --> 00:04:00.390
Successively, stored in a, and then
perform

64
00:04:00.390 --> 00:04:03.900
something with that value, and then
continue

65
00:04:03.900 --> 00:04:11.050
on until, there are no more, elements left
in the, collection, or data structure.

66
00:04:11.050 --> 00:04:14.880
That's all for this first lesson's
introduction to for loops.

67
00:04:14.880 --> 00:04:17.110
We're gonna continue our simple
introduction in

68
00:04:17.110 --> 00:04:19.390
the next lesson, before we move on

69
00:04:19.390 --> 00:04:21.715
to see more specific ways of using

70
00:04:21.715 --> 00:04:24.640
for loops with specific types of data
structures.

